// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order_list.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderListClient is the client API for OrderList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderListClient interface {
	GetOrderList(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
}

type orderListClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderListClient(cc grpc.ClientConnInterface) OrderListClient {
	return &orderListClient{cc}
}

func (c *orderListClient) GetOrderList(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, "/order_list.order_list/getOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderListServer is the server API for OrderList service.
// All implementations must embed UnimplementedOrderListServer
// for forward compatibility
type OrderListServer interface {
	GetOrderList(context.Context, *OrderListRequest) (*OrderListResponse, error)
	mustEmbedUnimplementedOrderListServer()
}

// UnimplementedOrderListServer must be embedded to have forward compatible implementations.
type UnimplementedOrderListServer struct {
}

func (UnimplementedOrderListServer) GetOrderList(context.Context, *OrderListRequest) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedOrderListServer) mustEmbedUnimplementedOrderListServer() {}

// UnsafeOrderListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderListServer will
// result in compilation errors.
type UnsafeOrderListServer interface {
	mustEmbedUnimplementedOrderListServer()
}

func RegisterOrderListServer(s grpc.ServiceRegistrar, srv OrderListServer) {
	s.RegisterService(&OrderList_ServiceDesc, srv)
}

func _OrderList_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderListServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_list.order_list/getOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderListServer).GetOrderList(ctx, req.(*OrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderList_ServiceDesc is the grpc.ServiceDesc for OrderList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_list.order_list",
	HandlerType: (*OrderListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrderList",
			Handler:    _OrderList_GetOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_list.proto",
}
